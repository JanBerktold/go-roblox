// Code generated by go-swagger; DO NOT EDIT.

package universes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new universes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for universes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GETV1UniversesMultiget gets a system collections generic list 1

If a universe can not be found for a given ID (such as -1) it will be skipped.
*/
func (a *Client) GETV1UniversesMultiget(params *GETV1UniversesMultigetParams) (*GETV1UniversesMultigetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UniversesMultigetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_universes_multiget",
		Method:             "GET",
		PathPattern:        "/v1/universes/multiget",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UniversesMultigetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UniversesMultigetOK), nil

}

/*
GETV1UniversesMultigetPermissions returns an array of granted and declined permissions related to the universes with the ids in universe ids for the authenticated user

If a universe can not be found for a given ID (such as -1) it will be skipped.
*/
func (a *Client) GETV1UniversesMultigetPermissions(params *GETV1UniversesMultigetPermissionsParams) (*GETV1UniversesMultigetPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UniversesMultigetPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_universes_multiget_permissions",
		Method:             "GET",
		PathPattern:        "/v1/universes/multiget/permissions",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UniversesMultigetPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UniversesMultigetPermissionsOK), nil

}

/*
GETV1UniversesUniverseID gets a roblox Api develop models universe model
*/
func (a *Client) GETV1UniversesUniverseID(params *GETV1UniversesUniverseIDParams) (*GETV1UniversesUniverseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UniversesUniverseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_universes_universeId_",
		Method:             "GET",
		PathPattern:        "/v1/universes/{universeId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UniversesUniverseIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UniversesUniverseIDOK), nil

}

/*
GETV1UniversesUniverseIDPermissions returns list of granted and declined permissions related to the universe with the id universe Id for authenticated user
*/
func (a *Client) GETV1UniversesUniverseIDPermissions(params *GETV1UniversesUniverseIDPermissionsParams) (*GETV1UniversesUniverseIDPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UniversesUniverseIDPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_universes_universeId_permissions",
		Method:             "GET",
		PathPattern:        "/v1/universes/{universeId}/permissions",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UniversesUniverseIDPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UniversesUniverseIDPermissionsOK), nil

}

/*
GETV1UniversesUniverseIDPlaces gets a list of places for a universe
*/
func (a *Client) GETV1UniversesUniverseIDPlaces(params *GETV1UniversesUniverseIDPlacesParams) (*GETV1UniversesUniverseIDPlacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UniversesUniverseIDPlacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_universes_universeId_places",
		Method:             "GET",
		PathPattern:        "/v1/universes/{universeId}/places",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UniversesUniverseIDPlacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UniversesUniverseIDPlacesOK), nil

}

/*
POSTV1UniversesUniverseIDActivate activates a universes
*/
func (a *Client) POSTV1UniversesUniverseIDActivate(params *POSTV1UniversesUniverseIDActivateParams) (*POSTV1UniversesUniverseIDActivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1UniversesUniverseIDActivateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_universes_universeId_activate",
		Method:             "POST",
		PathPattern:        "/v1/universes/{universeId}/activate",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1UniversesUniverseIDActivateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1UniversesUniverseIDActivateOK), nil

}

/*
POSTV1UniversesUniverseIDDeactivate deactivates a universes
*/
func (a *Client) POSTV1UniversesUniverseIDDeactivate(params *POSTV1UniversesUniverseIDDeactivateParams) (*POSTV1UniversesUniverseIDDeactivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1UniversesUniverseIDDeactivateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_universes_universeId_deactivate",
		Method:             "POST",
		PathPattern:        "/v1/universes/{universeId}/deactivate",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1UniversesUniverseIDDeactivateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1UniversesUniverseIDDeactivateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
