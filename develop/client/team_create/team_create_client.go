// Code generated by go-swagger; DO NOT EDIT.

package team_create

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new team create API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for team create API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEV1UniversesUniverseIDTeamcreateMemberships removes a user from a team create permissions list
*/
func (a *Client) DELETEV1UniversesUniverseIDTeamcreateMemberships(params *DELETEV1UniversesUniverseIDTeamcreateMembershipsParams) (*DELETEV1UniversesUniverseIDTeamcreateMembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEV1UniversesUniverseIDTeamcreateMembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE_v1_universes_universeId_teamcreate_memberships",
		Method:             "DELETE",
		PathPattern:        "/v1/universes/{universeId}/teamcreate/memberships",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEV1UniversesUniverseIDTeamcreateMembershipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEV1UniversesUniverseIDTeamcreateMembershipsOK), nil

}

/*
GETV1UniversesUniverseIDTeamcreate gets team create settings for an roblox platform universes i universe
*/
func (a *Client) GETV1UniversesUniverseIDTeamcreate(params *GETV1UniversesUniverseIDTeamcreateParams) (*GETV1UniversesUniverseIDTeamcreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UniversesUniverseIDTeamcreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_universes_universeId_teamcreate",
		Method:             "GET",
		PathPattern:        "/v1/universes/{universeId}/teamcreate",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UniversesUniverseIDTeamcreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UniversesUniverseIDTeamcreateOK), nil

}

/*
GETV1UniversesUniverseIDTeamcreateMemberships lists of users allowed to team create a universe
*/
func (a *Client) GETV1UniversesUniverseIDTeamcreateMemberships(params *GETV1UniversesUniverseIDTeamcreateMembershipsParams) (*GETV1UniversesUniverseIDTeamcreateMembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UniversesUniverseIDTeamcreateMembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_universes_universeId_teamcreate_memberships",
		Method:             "GET",
		PathPattern:        "/v1/universes/{universeId}/teamcreate/memberships",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UniversesUniverseIDTeamcreateMembershipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UniversesUniverseIDTeamcreateMembershipsOK), nil

}

/*
GETV1UserTeamcreateMemberships lists of universes the authenticated user has permission to team create
*/
func (a *Client) GETV1UserTeamcreateMemberships(params *GETV1UserTeamcreateMembershipsParams) (*GETV1UserTeamcreateMembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UserTeamcreateMembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_user_teamcreate_memberships",
		Method:             "GET",
		PathPattern:        "/v1/user/teamcreate/memberships",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UserTeamcreateMembershipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UserTeamcreateMembershipsOK), nil

}

/*
PATCHV1UniversesUniverseIDTeamcreate edits team create settings for a universe

Enables, or disables team create for a universe.
*/
func (a *Client) PATCHV1UniversesUniverseIDTeamcreate(params *PATCHV1UniversesUniverseIDTeamcreateParams) (*PATCHV1UniversesUniverseIDTeamcreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPATCHV1UniversesUniverseIDTeamcreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PATCH_v1_universes_universeId_teamcreate",
		Method:             "PATCH",
		PathPattern:        "/v1/universes/{universeId}/teamcreate",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PATCHV1UniversesUniverseIDTeamcreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PATCHV1UniversesUniverseIDTeamcreateOK), nil

}

/*
POSTV1UniversesUniverseIDTeamcreateMemberships adds a user to a team create permissions list
*/
func (a *Client) POSTV1UniversesUniverseIDTeamcreateMemberships(params *POSTV1UniversesUniverseIDTeamcreateMembershipsParams) (*POSTV1UniversesUniverseIDTeamcreateMembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1UniversesUniverseIDTeamcreateMembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_universes_universeId_teamcreate_memberships",
		Method:             "POST",
		PathPattern:        "/v1/universes/{universeId}/teamcreate/memberships",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1UniversesUniverseIDTeamcreateMembershipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1UniversesUniverseIDTeamcreateMembershipsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
