// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GETV1UserGroupsCanmanage gets a list of groups that a user can manage
*/
func (a *Client) GETV1UserGroupsCanmanage(params *GETV1UserGroupsCanmanageParams) (*GETV1UserGroupsCanmanageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UserGroupsCanmanageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_user_groups_canmanage",
		Method:             "GET",
		PathPattern:        "/v1/user/groups/canmanage",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UserGroupsCanmanageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UserGroupsCanmanageOK), nil

}

/*
GETV1UserStudiodata retrieves a JSON object from persistant storage
*/
func (a *Client) GETV1UserStudiodata(params *GETV1UserStudiodataParams) (*GETV1UserStudiodataOK, *GETV1UserStudiodataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UserStudiodataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_user_studiodata",
		Method:             "GET",
		PathPattern:        "/v1/user/studiodata",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UserStudiodataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETV1UserStudiodataOK:
		return value, nil, nil
	case *GETV1UserStudiodataNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GETV1UserUniverses gets a list of universes for the authenticated user
*/
func (a *Client) GETV1UserUniverses(params *GETV1UserUniversesParams) (*GETV1UserUniversesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UserUniversesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_user_universes",
		Method:             "GET",
		PathPattern:        "/v1/user/universes",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UserUniversesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UserUniversesOK), nil

}

/*
GETV1UserUniversesInvitedforteamcreate gets the invited team edit universes

This endpoint is under development!
*/
func (a *Client) GETV1UserUniversesInvitedforteamcreate(params *GETV1UserUniversesInvitedforteamcreateParams) (*GETV1UserUniversesInvitedforteamcreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1UserUniversesInvitedforteamcreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_user_universes_invitedforteamcreate",
		Method:             "GET",
		PathPattern:        "/v1/user/universes/invitedforteamcreate",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1UserUniversesInvitedforteamcreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1UserUniversesInvitedforteamcreateOK), nil

}

/*
POSTV1UserStudiodata saves a JSON object to persistent storage
*/
func (a *Client) POSTV1UserStudiodata(params *POSTV1UserStudiodataParams) (*POSTV1UserStudiodataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1UserStudiodataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_user_studiodata",
		Method:             "POST",
		PathPattern:        "/v1/user/studiodata",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1UserStudiodataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1UserStudiodataOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
