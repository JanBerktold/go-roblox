// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UniverseSettingsResponse Model for UniverseSettings controller responses
// swagger:model UniverseSettingsResponse

type UniverseSettingsResponse struct {

	// The universe Id
	ID int64 `json:"id,omitempty"`

	// The universe name
	Name string `json:"name,omitempty"`

	// Whether custom animations are allowed in the universe.
	UniverseAnimationType string `json:"universeAnimationType,omitempty"`

	// Which avatar types are allowed in the universe.
	UniverseAvatarType string `json:"universeAvatarType,omitempty"`

	// What type of collisions are used by the universe.
	UniverseCollisionType string `json:"universeCollisionType,omitempty"`

	// Whether custom scales allowed in the universe.
	UniverseScaleType string `json:"universeScaleType,omitempty"`
}

/* polymorph UniverseSettingsResponse id false */

/* polymorph UniverseSettingsResponse name false */

/* polymorph UniverseSettingsResponse universeAnimationType false */

/* polymorph UniverseSettingsResponse universeAvatarType false */

/* polymorph UniverseSettingsResponse universeCollisionType false */

/* polymorph UniverseSettingsResponse universeScaleType false */

// Validate validates this universe settings response
func (m *UniverseSettingsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUniverseAnimationType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUniverseAvatarType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUniverseCollisionType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUniverseScaleType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var universeSettingsResponseTypeUniverseAnimationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Standard","PlayerChoice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeSettingsResponseTypeUniverseAnimationTypePropEnum = append(universeSettingsResponseTypeUniverseAnimationTypePropEnum, v)
	}
}

const (
	// UniverseSettingsResponseUniverseAnimationTypeStandard captures enum value "Standard"
	UniverseSettingsResponseUniverseAnimationTypeStandard string = "Standard"
	// UniverseSettingsResponseUniverseAnimationTypePlayerChoice captures enum value "PlayerChoice"
	UniverseSettingsResponseUniverseAnimationTypePlayerChoice string = "PlayerChoice"
)

// prop value enum
func (m *UniverseSettingsResponse) validateUniverseAnimationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, universeSettingsResponseTypeUniverseAnimationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UniverseSettingsResponse) validateUniverseAnimationType(formats strfmt.Registry) error {

	if swag.IsZero(m.UniverseAnimationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUniverseAnimationTypeEnum("universeAnimationType", "body", m.UniverseAnimationType); err != nil {
		return err
	}

	return nil
}

var universeSettingsResponseTypeUniverseAvatarTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MorphToR6","PlayerChoice","MorphToR15"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeSettingsResponseTypeUniverseAvatarTypePropEnum = append(universeSettingsResponseTypeUniverseAvatarTypePropEnum, v)
	}
}

const (
	// UniverseSettingsResponseUniverseAvatarTypeMorphToR6 captures enum value "MorphToR6"
	UniverseSettingsResponseUniverseAvatarTypeMorphToR6 string = "MorphToR6"
	// UniverseSettingsResponseUniverseAvatarTypePlayerChoice captures enum value "PlayerChoice"
	UniverseSettingsResponseUniverseAvatarTypePlayerChoice string = "PlayerChoice"
	// UniverseSettingsResponseUniverseAvatarTypeMorphToR15 captures enum value "MorphToR15"
	UniverseSettingsResponseUniverseAvatarTypeMorphToR15 string = "MorphToR15"
)

// prop value enum
func (m *UniverseSettingsResponse) validateUniverseAvatarTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, universeSettingsResponseTypeUniverseAvatarTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UniverseSettingsResponse) validateUniverseAvatarType(formats strfmt.Registry) error {

	if swag.IsZero(m.UniverseAvatarType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUniverseAvatarTypeEnum("universeAvatarType", "body", m.UniverseAvatarType); err != nil {
		return err
	}

	return nil
}

var universeSettingsResponseTypeUniverseCollisionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InnerBox","OuterBox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeSettingsResponseTypeUniverseCollisionTypePropEnum = append(universeSettingsResponseTypeUniverseCollisionTypePropEnum, v)
	}
}

const (
	// UniverseSettingsResponseUniverseCollisionTypeInnerBox captures enum value "InnerBox"
	UniverseSettingsResponseUniverseCollisionTypeInnerBox string = "InnerBox"
	// UniverseSettingsResponseUniverseCollisionTypeOuterBox captures enum value "OuterBox"
	UniverseSettingsResponseUniverseCollisionTypeOuterBox string = "OuterBox"
)

// prop value enum
func (m *UniverseSettingsResponse) validateUniverseCollisionTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, universeSettingsResponseTypeUniverseCollisionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UniverseSettingsResponse) validateUniverseCollisionType(formats strfmt.Registry) error {

	if swag.IsZero(m.UniverseCollisionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUniverseCollisionTypeEnum("universeCollisionType", "body", m.UniverseCollisionType); err != nil {
		return err
	}

	return nil
}

var universeSettingsResponseTypeUniverseScaleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoScales","AllScales"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeSettingsResponseTypeUniverseScaleTypePropEnum = append(universeSettingsResponseTypeUniverseScaleTypePropEnum, v)
	}
}

const (
	// UniverseSettingsResponseUniverseScaleTypeNoScales captures enum value "NoScales"
	UniverseSettingsResponseUniverseScaleTypeNoScales string = "NoScales"
	// UniverseSettingsResponseUniverseScaleTypeAllScales captures enum value "AllScales"
	UniverseSettingsResponseUniverseScaleTypeAllScales string = "AllScales"
)

// prop value enum
func (m *UniverseSettingsResponse) validateUniverseScaleTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, universeSettingsResponseTypeUniverseScaleTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UniverseSettingsResponse) validateUniverseScaleType(formats strfmt.Registry) error {

	if swag.IsZero(m.UniverseScaleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUniverseScaleTypeEnum("universeScaleType", "body", m.UniverseScaleType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UniverseSettingsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UniverseSettingsResponse) UnmarshalBinary(b []byte) error {
	var res UniverseSettingsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
