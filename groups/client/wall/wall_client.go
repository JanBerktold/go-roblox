// Code generated by go-swagger; DO NOT EDIT.

package wall

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new wall API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wall API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEV1GroupsGroupIDWallPostsPostID deletes a group wall post
*/
func (a *Client) DELETEV1GroupsGroupIDWallPostsPostID(params *DELETEV1GroupsGroupIDWallPostsPostIDParams) (*DELETEV1GroupsGroupIDWallPostsPostIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEV1GroupsGroupIDWallPostsPostIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE_v1_groups_groupId_wall_posts_postId_",
		Method:             "DELETE",
		PathPattern:        "/v1/groups/{groupId}/wall/posts/{postId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEV1GroupsGroupIDWallPostsPostIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEV1GroupsGroupIDWallPostsPostIDOK), nil

}

/*
GETV1GroupsGroupIDWallPosts gets a list of group wall posts
*/
func (a *Client) GETV1GroupsGroupIDWallPosts(params *GETV1GroupsGroupIDWallPostsParams) (*GETV1GroupsGroupIDWallPostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1GroupsGroupIDWallPostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_groups_groupId_wall_posts",
		Method:             "GET",
		PathPattern:        "/v1/groups/{groupId}/wall/posts",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1GroupsGroupIDWallPostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1GroupsGroupIDWallPostsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
