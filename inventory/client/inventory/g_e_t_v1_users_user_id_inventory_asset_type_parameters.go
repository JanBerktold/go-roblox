// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGETV1UsersUserIDInventoryAssetTypeParams creates a new GETV1UsersUserIDInventoryAssetTypeParams object
// with the default values initialized.
func NewGETV1UsersUserIDInventoryAssetTypeParams() *GETV1UsersUserIDInventoryAssetTypeParams {
	var ()
	return &GETV1UsersUserIDInventoryAssetTypeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGETV1UsersUserIDInventoryAssetTypeParamsWithTimeout creates a new GETV1UsersUserIDInventoryAssetTypeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGETV1UsersUserIDInventoryAssetTypeParamsWithTimeout(timeout time.Duration) *GETV1UsersUserIDInventoryAssetTypeParams {
	var ()
	return &GETV1UsersUserIDInventoryAssetTypeParams{

		timeout: timeout,
	}
}

// NewGETV1UsersUserIDInventoryAssetTypeParamsWithContext creates a new GETV1UsersUserIDInventoryAssetTypeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGETV1UsersUserIDInventoryAssetTypeParamsWithContext(ctx context.Context) *GETV1UsersUserIDInventoryAssetTypeParams {
	var ()
	return &GETV1UsersUserIDInventoryAssetTypeParams{

		Context: ctx,
	}
}

// NewGETV1UsersUserIDInventoryAssetTypeParamsWithHTTPClient creates a new GETV1UsersUserIDInventoryAssetTypeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGETV1UsersUserIDInventoryAssetTypeParamsWithHTTPClient(client *http.Client) *GETV1UsersUserIDInventoryAssetTypeParams {
	var ()
	return &GETV1UsersUserIDInventoryAssetTypeParams{
		HTTPClient: client,
	}
}

/*GETV1UsersUserIDInventoryAssetTypeParams contains all the parameters to send to the API endpoint
for the g e t v1 users user Id inventory asset type operation typically these are written to a http.Request
*/
type GETV1UsersUserIDInventoryAssetTypeParams struct {

	/*AssetType
	  The asset type.

	*/
	AssetType string
	/*ItemsPerPage
	  The max number of items that can be returned.

	*/
	ItemsPerPage *int32
	/*Keyword
	  Filter results for items containing this.

	*/
	Keyword *string
	/*PageNumber
	  The start index.

	*/
	PageNumber *int32
	/*UserID
	  The user identifier.

	*/
	UserID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) WithTimeout(timeout time.Duration) *GETV1UsersUserIDInventoryAssetTypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) WithContext(ctx context.Context) *GETV1UsersUserIDInventoryAssetTypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) WithHTTPClient(client *http.Client) *GETV1UsersUserIDInventoryAssetTypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssetType adds the assetType to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) WithAssetType(assetType string) *GETV1UsersUserIDInventoryAssetTypeParams {
	o.SetAssetType(assetType)
	return o
}

// SetAssetType adds the assetType to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) SetAssetType(assetType string) {
	o.AssetType = assetType
}

// WithItemsPerPage adds the itemsPerPage to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) WithItemsPerPage(itemsPerPage *int32) *GETV1UsersUserIDInventoryAssetTypeParams {
	o.SetItemsPerPage(itemsPerPage)
	return o
}

// SetItemsPerPage adds the itemsPerPage to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) SetItemsPerPage(itemsPerPage *int32) {
	o.ItemsPerPage = itemsPerPage
}

// WithKeyword adds the keyword to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) WithKeyword(keyword *string) *GETV1UsersUserIDInventoryAssetTypeParams {
	o.SetKeyword(keyword)
	return o
}

// SetKeyword adds the keyword to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) SetKeyword(keyword *string) {
	o.Keyword = keyword
}

// WithPageNumber adds the pageNumber to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) WithPageNumber(pageNumber *int32) *GETV1UsersUserIDInventoryAssetTypeParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithUserID adds the userID to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) WithUserID(userID int32) *GETV1UsersUserIDInventoryAssetTypeParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the g e t v1 users user Id inventory asset type params
func (o *GETV1UsersUserIDInventoryAssetTypeParams) SetUserID(userID int32) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GETV1UsersUserIDInventoryAssetTypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param assetType
	if err := r.SetPathParam("assetType", o.AssetType); err != nil {
		return err
	}

	if o.ItemsPerPage != nil {

		// query param itemsPerPage
		var qrItemsPerPage int32
		if o.ItemsPerPage != nil {
			qrItemsPerPage = *o.ItemsPerPage
		}
		qItemsPerPage := swag.FormatInt32(qrItemsPerPage)
		if qItemsPerPage != "" {
			if err := r.SetQueryParam("itemsPerPage", qItemsPerPage); err != nil {
				return err
			}
		}

	}

	if o.Keyword != nil {

		// query param keyword
		var qrKeyword string
		if o.Keyword != nil {
			qrKeyword = *o.Keyword
		}
		qKeyword := qrKeyword
		if qKeyword != "" {
			if err := r.SetQueryParam("keyword", qKeyword); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	// path param userId
	if err := r.SetPathParam("userId", swag.FormatInt32(o.UserID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
