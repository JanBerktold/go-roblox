// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new assets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for assets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GETV1AssetsAssetIDOwners gets a list of owners of an asset
*/
func (a *Client) GETV1AssetsAssetIDOwners(params *GETV1AssetsAssetIDOwnersParams) (*GETV1AssetsAssetIDOwnersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1AssetsAssetIDOwnersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_assets_assetId_owners",
		Method:             "GET",
		PathPattern:        "/v1/assets/{assetId}/owners",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1AssetsAssetIDOwnersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1AssetsAssetIDOwnersOK), nil

}

/*
GETV1PackagesPackageIDAssets givens a package ID returns the list of asset ids for that package
*/
func (a *Client) GETV1PackagesPackageIDAssets(params *GETV1PackagesPackageIDAssetsParams) (*GETV1PackagesPackageIDAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1PackagesPackageIDAssetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_packages_packageId_assets",
		Method:             "GET",
		PathPattern:        "/v1/packages/{packageID}/assets",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1PackagesPackageIDAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1PackagesPackageIDAssetsOK), nil

}

/*
GETV1RecommendationsAssetTypeID gets a list of recommended assets given an asset type
*/
func (a *Client) GETV1RecommendationsAssetTypeID(params *GETV1RecommendationsAssetTypeIDParams) (*GETV1RecommendationsAssetTypeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1RecommendationsAssetTypeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_recommendations_assetTypeId_",
		Method:             "GET",
		PathPattern:        "/v1/recommendations/{assetTypeId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1RecommendationsAssetTypeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1RecommendationsAssetTypeIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
