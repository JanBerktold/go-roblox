// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectibleUserAssetModel A model containing information about a {Roblox.UserAsset}
// swagger:model CollectibleUserAssetModel

type CollectibleUserAssetModel struct {

	// asset Id
	AssetID int64 `json:"assetId,omitempty"`

	// asset stock
	AssetStock int64 `json:"assetStock,omitempty"`

	// builders club membership type
	BuildersClubMembershipType string `json:"buildersClubMembershipType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// original price
	OriginalPrice int64 `json:"originalPrice,omitempty"`

	// recent average price
	RecentAveragePrice int64 `json:"recentAveragePrice,omitempty"`

	// serial number
	SerialNumber int64 `json:"serialNumber,omitempty"`

	// user asset Id
	UserAssetID int64 `json:"userAssetId,omitempty"`
}

/* polymorph CollectibleUserAssetModel assetId false */

/* polymorph CollectibleUserAssetModel assetStock false */

/* polymorph CollectibleUserAssetModel buildersClubMembershipType false */

/* polymorph CollectibleUserAssetModel name false */

/* polymorph CollectibleUserAssetModel originalPrice false */

/* polymorph CollectibleUserAssetModel recentAveragePrice false */

/* polymorph CollectibleUserAssetModel serialNumber false */

/* polymorph CollectibleUserAssetModel userAssetId false */

// Validate validates this collectible user asset model
func (m *CollectibleUserAssetModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildersClubMembershipType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var collectibleUserAssetModelTypeBuildersClubMembershipTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","BC","TBC","OBC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		collectibleUserAssetModelTypeBuildersClubMembershipTypePropEnum = append(collectibleUserAssetModelTypeBuildersClubMembershipTypePropEnum, v)
	}
}

const (
	// CollectibleUserAssetModelBuildersClubMembershipTypeNone captures enum value "None"
	CollectibleUserAssetModelBuildersClubMembershipTypeNone string = "None"
	// CollectibleUserAssetModelBuildersClubMembershipTypeBC captures enum value "BC"
	CollectibleUserAssetModelBuildersClubMembershipTypeBC string = "BC"
	// CollectibleUserAssetModelBuildersClubMembershipTypeTBC captures enum value "TBC"
	CollectibleUserAssetModelBuildersClubMembershipTypeTBC string = "TBC"
	// CollectibleUserAssetModelBuildersClubMembershipTypeOBC captures enum value "OBC"
	CollectibleUserAssetModelBuildersClubMembershipTypeOBC string = "OBC"
)

// prop value enum
func (m *CollectibleUserAssetModel) validateBuildersClubMembershipTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, collectibleUserAssetModelTypeBuildersClubMembershipTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CollectibleUserAssetModel) validateBuildersClubMembershipType(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildersClubMembershipType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBuildersClubMembershipTypeEnum("buildersClubMembershipType", "body", m.BuildersClubMembershipType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectibleUserAssetModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectibleUserAssetModel) UnmarshalBinary(b []byte) error {
	var res CollectibleUserAssetModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
