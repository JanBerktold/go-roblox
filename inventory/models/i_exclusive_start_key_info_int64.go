// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IExclusiveStartKeyInfoInt64 i exclusive start key info int64
// swagger:model IExclusiveStartKeyInfo[Int64]

type IExclusiveStartKeyInfoInt64 struct {

	// count
	// Read Only: true
	Count int32 `json:"Count,omitempty"`

	// paging direction
	// Read Only: true
	PagingDirection string `json:"PagingDirection,omitempty"`

	// sort order
	// Read Only: true
	SortOrder string `json:"SortOrder,omitempty"`
}

/* polymorph IExclusiveStartKeyInfo[Int64] Count false */

/* polymorph IExclusiveStartKeyInfo[Int64] PagingDirection false */

/* polymorph IExclusiveStartKeyInfo[Int64] SortOrder false */

// Validate validates this i exclusive start key info int64
func (m *IExclusiveStartKeyInfoInt64) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePagingDirection(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var iExclusiveStartKeyInfoInt64TypePagingDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Forward","Backward"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iExclusiveStartKeyInfoInt64TypePagingDirectionPropEnum = append(iExclusiveStartKeyInfoInt64TypePagingDirectionPropEnum, v)
	}
}

const (
	// IExclusiveStartKeyInfoInt64PagingDirectionForward captures enum value "Forward"
	IExclusiveStartKeyInfoInt64PagingDirectionForward string = "Forward"
	// IExclusiveStartKeyInfoInt64PagingDirectionBackward captures enum value "Backward"
	IExclusiveStartKeyInfoInt64PagingDirectionBackward string = "Backward"
)

// prop value enum
func (m *IExclusiveStartKeyInfoInt64) validatePagingDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iExclusiveStartKeyInfoInt64TypePagingDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IExclusiveStartKeyInfoInt64) validatePagingDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.PagingDirection) { // not required
		return nil
	}

	// value enum
	if err := m.validatePagingDirectionEnum("PagingDirection", "body", m.PagingDirection); err != nil {
		return err
	}

	return nil
}

var iExclusiveStartKeyInfoInt64TypeSortOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Asc","Desc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iExclusiveStartKeyInfoInt64TypeSortOrderPropEnum = append(iExclusiveStartKeyInfoInt64TypeSortOrderPropEnum, v)
	}
}

const (
	// IExclusiveStartKeyInfoInt64SortOrderAsc captures enum value "Asc"
	IExclusiveStartKeyInfoInt64SortOrderAsc string = "Asc"
	// IExclusiveStartKeyInfoInt64SortOrderDesc captures enum value "Desc"
	IExclusiveStartKeyInfoInt64SortOrderDesc string = "Desc"
)

// prop value enum
func (m *IExclusiveStartKeyInfoInt64) validateSortOrderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iExclusiveStartKeyInfoInt64TypeSortOrderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IExclusiveStartKeyInfoInt64) validateSortOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.SortOrder) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortOrderEnum("SortOrder", "body", m.SortOrder); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IExclusiveStartKeyInfoInt64) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IExclusiveStartKeyInfoInt64) UnmarshalBinary(b []byte) error {
	var res IExclusiveStartKeyInfoInt64
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
