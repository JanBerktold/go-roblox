// Code generated by go-swagger; DO NOT EDIT.

package validators

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGETV1ValidatorsEmailParams creates a new GETV1ValidatorsEmailParams object
// with the default values initialized.
func NewGETV1ValidatorsEmailParams() *GETV1ValidatorsEmailParams {
	var ()
	return &GETV1ValidatorsEmailParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGETV1ValidatorsEmailParamsWithTimeout creates a new GETV1ValidatorsEmailParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGETV1ValidatorsEmailParamsWithTimeout(timeout time.Duration) *GETV1ValidatorsEmailParams {
	var ()
	return &GETV1ValidatorsEmailParams{

		timeout: timeout,
	}
}

// NewGETV1ValidatorsEmailParamsWithContext creates a new GETV1ValidatorsEmailParams object
// with the default values initialized, and the ability to set a context for a request
func NewGETV1ValidatorsEmailParamsWithContext(ctx context.Context) *GETV1ValidatorsEmailParams {
	var ()
	return &GETV1ValidatorsEmailParams{

		Context: ctx,
	}
}

// NewGETV1ValidatorsEmailParamsWithHTTPClient creates a new GETV1ValidatorsEmailParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGETV1ValidatorsEmailParamsWithHTTPClient(client *http.Client) *GETV1ValidatorsEmailParams {
	var ()
	return &GETV1ValidatorsEmailParams{
		HTTPClient: client,
	}
}

/*GETV1ValidatorsEmailParams contains all the parameters to send to the API endpoint
for the g e t v1 validators email operation typically these are written to a http.Request
*/
type GETV1ValidatorsEmailParams struct {

	/*RequestBodyEmail
	  Gets or sets the email to check for validation

	*/
	RequestBodyEmail *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the g e t v1 validators email params
func (o *GETV1ValidatorsEmailParams) WithTimeout(timeout time.Duration) *GETV1ValidatorsEmailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the g e t v1 validators email params
func (o *GETV1ValidatorsEmailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the g e t v1 validators email params
func (o *GETV1ValidatorsEmailParams) WithContext(ctx context.Context) *GETV1ValidatorsEmailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the g e t v1 validators email params
func (o *GETV1ValidatorsEmailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the g e t v1 validators email params
func (o *GETV1ValidatorsEmailParams) WithHTTPClient(client *http.Client) *GETV1ValidatorsEmailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the g e t v1 validators email params
func (o *GETV1ValidatorsEmailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRequestBodyEmail adds the requestBodyEmail to the g e t v1 validators email params
func (o *GETV1ValidatorsEmailParams) WithRequestBodyEmail(requestBodyEmail *string) *GETV1ValidatorsEmailParams {
	o.SetRequestBodyEmail(requestBodyEmail)
	return o
}

// SetRequestBodyEmail adds the requestBodyEmail to the g e t v1 validators email params
func (o *GETV1ValidatorsEmailParams) SetRequestBodyEmail(requestBodyEmail *string) {
	o.RequestBodyEmail = requestBodyEmail
}

// WriteToRequest writes these params to a swagger request
func (o *GETV1ValidatorsEmailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RequestBodyEmail != nil {

		// query param requestBody.email
		var qrRequestBodyEmail string
		if o.RequestBodyEmail != nil {
			qrRequestBodyEmail = *o.RequestBodyEmail
		}
		qRequestBodyEmail := qrRequestBodyEmail
		if qRequestBodyEmail != "" {
			if err := r.SetQueryParam("requestBody.email", qRequestBodyEmail); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
