// Code generated by go-swagger; DO NOT EDIT.

package account_pin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new account pin API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account pin API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEV1AccountPin requests for deletes the account pin from the account
*/
func (a *Client) DELETEV1AccountPin(params *DELETEV1AccountPinParams) (*DELETEV1AccountPinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEV1AccountPinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE_v1_account_pin",
		Method:             "DELETE",
		PathPattern:        "/v1/account/pin",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEV1AccountPinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEV1AccountPinOK), nil

}

/*
GETV1AccountPin gets the account pin status if the account pin is valid this returns the time in seconds until when the account pin is unlocked
*/
func (a *Client) GETV1AccountPin(params *GETV1AccountPinParams) (*GETV1AccountPinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1AccountPinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_account_pin",
		Method:             "GET",
		PathPattern:        "/v1/account/pin",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1AccountPinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1AccountPinOK), nil

}

/*
PATCHV1AccountPin requests made to update the account pin on the account
*/
func (a *Client) PATCHV1AccountPin(params *PATCHV1AccountPinParams) (*PATCHV1AccountPinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPATCHV1AccountPinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PATCH_v1_account_pin",
		Method:             "PATCH",
		PathPattern:        "/v1/account/pin",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PATCHV1AccountPinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PATCHV1AccountPinOK), nil

}

/*
POSTV1AccountPin reuqests to create the account pin
*/
func (a *Client) POSTV1AccountPin(params *POSTV1AccountPinParams) (*POSTV1AccountPinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1AccountPinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_account_pin",
		Method:             "POST",
		PathPattern:        "/v1/account/pin",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1AccountPinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1AccountPinOK), nil

}

/*
POSTV1AccountPinLock requests to locks the account which has an account pin enabled
*/
func (a *Client) POSTV1AccountPinLock(params *POSTV1AccountPinLockParams) (*POSTV1AccountPinLockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1AccountPinLockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_account_pin_lock",
		Method:             "POST",
		PathPattern:        "/v1/account/pin/lock",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1AccountPinLockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1AccountPinLockOK), nil

}

/*
POSTV1AccountPinUnlock requests to unlock the account pin
*/
func (a *Client) POSTV1AccountPinUnlock(params *POSTV1AccountPinUnlockParams) (*POSTV1AccountPinUnlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1AccountPinUnlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_account_pin_unlock",
		Method:             "POST",
		PathPattern:        "/v1/account/pin/unlock",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1AccountPinUnlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1AccountPinUnlockOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
