// Code generated by go-swagger; DO NOT EDIT.

package passwords

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new passwords API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for passwords API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
POSTV1PasswordsReset resets a password for a user that belongs to the password reset ticket

The user will be logged out after the password changes.
A call to login should be made after calling this endpoint, and getting a succesful response to log the user in.
This endpoint is not responsible for authenticating the user.
*/
func (a *Client) POSTV1PasswordsReset(params *POSTV1PasswordsResetParams) (*POSTV1PasswordsResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1PasswordsResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_passwords_reset",
		Method:             "POST",
		PathPattern:        "/v1/passwords/reset",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1PasswordsResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1PasswordsResetOK), nil

}

/*
POSTV1PasswordsResetSend sends a password reset email to the specified user
*/
func (a *Client) POSTV1PasswordsResetSend(params *POSTV1PasswordsResetSendParams) (*POSTV1PasswordsResetSendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1PasswordsResetSendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_passwords_reset_send",
		Method:             "POST",
		PathPattern:        "/v1/passwords/reset/send",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1PasswordsResetSendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1PasswordsResetSendOK), nil

}

/*
POSTV1UserPasswordsChange changes the password for the authenticated user

The current password is needed for verification that the password can be changed.
*/
func (a *Client) POSTV1UserPasswordsChange(params *POSTV1UserPasswordsChangeParams) (*POSTV1UserPasswordsChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1UserPasswordsChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_user_passwords_change",
		Method:             "POST",
		PathPattern:        "/v1/user/passwords/change",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1UserPasswordsChangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1UserPasswordsChangeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
