// Code generated by go-swagger; DO NOT EDIT.

package social_authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new social authentication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for social authentication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GETV1SocialConnectedProviders gets social network user information if the given social auth method is connected to current user
*/
func (a *Client) GETV1SocialConnectedProviders(params *GETV1SocialConnectedProvidersParams) (*GETV1SocialConnectedProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETV1SocialConnectedProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_v1_social_connected_providers",
		Method:             "GET",
		PathPattern:        "/v1/social/connected-providers",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETV1SocialConnectedProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETV1SocialConnectedProvidersOK), nil

}

/*
POSTV1SocialProviderDisconnect removes the given social provider auth method from current roblox user if it is connected
*/
func (a *Client) POSTV1SocialProviderDisconnect(params *POSTV1SocialProviderDisconnectParams) (*POSTV1SocialProviderDisconnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTV1SocialProviderDisconnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_v1_social_provider_disconnect",
		Method:             "POST",
		PathPattern:        "/v1/social/{provider}/disconnect",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTV1SocialProviderDisconnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTV1SocialProviderDisconnectOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
